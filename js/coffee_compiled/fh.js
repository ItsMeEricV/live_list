// Generated by CoffeeScript 1.7.1
(function() {
  var INITIAL_PING_TIMEOUT, KEEPALIVE_PING_TIMEOUT, isPong, sendPing, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Firehose = {};

  Firehose.Transport = (function() {
    Transport.supported = function() {
      return false;
    };

    function Transport(config) {
      if (config == null) {
        config = {};
      }
      this.getLastMessageSequence = __bind(this.getLastMessageSequence, this);
      this._close = __bind(this._close, this);
      this._open = __bind(this._open, this);
      this._error = __bind(this._error, this);
      this.connect = __bind(this.connect, this);
      this.config = config;
      this._retryDelay = 3000;
      this;
    }

    Transport.prototype.connect = function(delay) {
      if (delay == null) {
        delay = 0;
      }
      setTimeout(this._request, delay);
      return this;
    };

    Transport.prototype.name = function() {
      throw 'not implemented in base Transport';
    };

    Transport.prototype.stop = function() {
      throw 'not implemented in base Transport';
    };

    Transport.prototype._request = function() {
      throw 'not implemented in base Transport';
    };

    Transport.prototype._error = function(event) {
      if (this._succeeded) {
        this.config.disconnected();
        return this.connect(this._retryDelay);
      } else {
        return this.config.failed(this);
      }
    };

    Transport.prototype._open = function(event) {
      this._succeeded = true;
      return this.config.connected(this);
    };

    Transport.prototype._close = function(event) {
      return this.config.disconnected();
    };

    Transport.prototype.getLastMessageSequence = function() {
      return this._lastMessageSequence || 0;
    };

    return Transport;

  })();

  Firehose.LongPoll = (function(_super) {
    __extends(LongPoll, _super);

    LongPoll.prototype.messageSequenceHeader = 'Pragma';

    LongPoll.prototype.name = function() {
      return 'LongPoll';
    };

    LongPoll.ieSupported = function() {
      return (document.documentMode || 10) > 8;
    };

    LongPoll.supported = function() {
      var xhr;
      if (xhr = $.ajaxSettings.xhr()) {
        return "withCredentials" in xhr || Firehose.LongPoll.ieSupported();
      }
    };

    function LongPoll(args) {
      this._error = __bind(this._error, this);
      this._ping = __bind(this._ping, this);
      this._success = __bind(this._success, this);
      this.stop = __bind(this.stop, this);
      this._request = __bind(this._request, this);
      this._protocol = __bind(this._protocol, this);
      var _base, _base1, _base2, _base3;
      LongPoll.__super__.constructor.call(this, args);
      if ((_base = this.config).ssl == null) {
        _base.ssl = false;
      }
      (_base1 = this.config).longPoll || (_base1.longPoll = {});
      (_base2 = this.config.longPoll).url || (_base2.url = "" + (this._protocol()) + ":" + this.config.uri);
      (_base3 = this.config.longPoll).timeout || (_base3.timeout = 25000);
      this._lagTime = 5000;
      this._timeout = this.config.longPoll.timeout + this._lagTime;
      this._okInterval = this.config.okInterval || 0;
      this._stopRequestLoop = false;
    }

    LongPoll.prototype._protocol = function() {
      if (this.config.ssl) {
        return "https";
      } else {
        return "http";
      }
    };

    LongPoll.prototype._request = function() {
      var data;
      if (this._stopRequestLoop) {
        return;
      }
      data = this.config.params;
      data.last_message_sequence = this._lastMessageSequence;
      return this._lastRequest = $.ajax({
        url: this.config.longPoll.url,
        firehose: true,
        crossDomain: true,
        data: data,
        timeout: this._timeout,
        success: this._success,
        error: this._error,
        cache: false
      });
    };

    LongPoll.prototype.stop = function() {
      var e;
      this._stopRequestLoop = true;
      if (this._lastRequest != null) {
        try {
          this._lastRequest.abort();
        } catch (_error) {
          e = _error;
        }
        delete this._lastRequest;
      }
      if (this._lastPingRequest != null) {
        try {
          this._lastPingRequest.abort();
        } catch (_error) {
          e = _error;
        }
        return delete this._lastPingRequest;
      }
    };

    LongPoll.prototype._success = function(data, status, jqXhr) {
      var e, last_sequence, message, _ref;
      if (this._needToNotifyOfReconnect || !this._succeeded) {
        this._needToNotifyOfReconnect = false;
        this._open(data);
      }
      if (this._stopRequestLoop) {
        return;
      }
      if (jqXhr.status === 200) {
        try {
          _ref = JSON.parse(jqXhr.responseText), message = _ref.message, last_sequence = _ref.last_sequence;
          this._lastMessageSequence = last_sequence;
          this.config.message(this.config.parse(message));
        } catch (_error) {
          e = _error;
        }
      }
      return this.connect(this._okInterval);
    };

    LongPoll.prototype._ping = function() {
      return this._lastPingRequest = $.ajax({
        url: this.config.longPoll.url,
        method: 'HEAD',
        crossDomain: true,
        firehose: true,
        data: this.config.params,
        success: (function(_this) {
          return function() {
            if (_this._needToNotifyOfReconnect) {
              _this._needToNotifyOfReconnect = false;
              return _this.config.connected(_this);
            }
          };
        })(this)
      });
    };

    LongPoll.prototype._error = function(jqXhr, status, error) {
      if (!(this._needToNotifyOfReconnect || this._stopRequestLoop)) {
        this._needToNotifyOfReconnect = true;
        this.config.disconnected();
      }
      if (!this._stopRequestLoop) {
        setTimeout(this._ping, this._retryDelay + this._lagTime);
        return setTimeout(this._request, this._retryDelay);
      }
    };

    return LongPoll;

  })(Firehose.Transport);

  if ((typeof $ !== "undefined" && $ !== null ? (_ref = $.browser) != null ? _ref.msie : void 0 : void 0) && ((_ref1 = parseInt($.browser.version, 10)) === 8 || _ref1 === 9)) {
    jQuery.ajaxTransport(function(s) {
      var xdr;
      if (s.crossDomain && s.async && s.firehose) {
        if (s.timeout) {
          s.xdrTimeout = s.timeout;
          delete s.timeout;
        }
        xdr = void 0;
        return {
          send: function(_, complete) {
            var callback;
            callback = function(status, statusText, responses, responseHeaders) {
              xdr.onload = xdr.onerror = xdr.ontimeout = jQuery.noop;
              xdr = void 0;
              return complete(status, statusText, responses, responseHeaders);
            };
            xdr = new XDomainRequest();
            xdr.open(s.type, s.url);
            xdr.onload = function() {
              var headers;
              headers = "Content-Type: " + xdr.contentType;
              return callback(200, "OK", {
                text: xdr.responseText
              }, headers);
            };
            xdr.onerror = function() {
              return callback(404, "Not Found");
            };
            if (s.xdrTimeout != null) {
              xdr.ontimeout = function() {
                return callback(0, "timeout");
              };
              xdr.timeout = s.xdrTimeout;
            }
            return xdr.send((s.hasContent && s.data) || null);
          },
          abort: function() {
            if (xdr != null) {
              xdr.onerror = jQuery.noop();
              return xdr.abort();
            }
          }
        };
      }
    });
  }

  INITIAL_PING_TIMEOUT = 2000;

  KEEPALIVE_PING_TIMEOUT = 20000;

  Firehose.WebSocket = (function(_super) {
    __extends(WebSocket, _super);

    WebSocket.prototype.name = function() {
      return 'WebSocket';
    };

    WebSocket.ieSupported = function() {
      return (document.documentMode || 10) > 9;
    };

    WebSocket.supported = function() {
      return window.WebSocket != null;
    };

    function WebSocket(args) {
      this._clearKeepalive = __bind(this._clearKeepalive, this);
      this._restartKeepAlive = __bind(this._restartKeepAlive, this);
      this._cleanUp = __bind(this._cleanUp, this);
      this._error = __bind(this._error, this);
      this._close = __bind(this._close, this);
      this._message = __bind(this._message, this);
      this.stop = __bind(this.stop, this);
      this.sendStartingMessageSequence = __bind(this.sendStartingMessageSequence, this);
      this._lookForInitialPong = __bind(this._lookForInitialPong, this);
      this._open = __bind(this._open, this);
      this._protocol = __bind(this._protocol, this);
      this._request = __bind(this._request, this);
      var _base;
      WebSocket.__super__.constructor.call(this, args);
      (_base = this.config).webSocket || (_base.webSocket = {});
      this.config.webSocket.connectionVerified = this.config.connectionVerified;
    }

    WebSocket.prototype._request = function() {
      var err;
      try {
        this.socket = new window.WebSocket("" + (this._protocol()) + ":" + this.config.uri + "?" + ($.param(this.config.params)));
        this.socket.onopen = this._open;
        this.socket.onclose = this._close;
        this.socket.onerror = this._error;
        return this.socket.onmessage = this._lookForInitialPong;
      } catch (_error) {
        err = _error;
        return typeof console !== "undefined" && console !== null ? console.log(err) : void 0;
      }
    };

    WebSocket.prototype._protocol = function() {
      if (this.config.ssl) {
        return "wss";
      } else {
        return "ws";
      }
    };

    WebSocket.prototype._open = function() {
      return sendPing(this.socket);
    };

    WebSocket.prototype._lookForInitialPong = function(event) {
      var e;
      this._restartKeepAlive();
      if (isPong((function() {
        try {
          return JSON.parse(event.data);
        } catch (_error) {
          e = _error;
          return {};
        }
      })())) {
        if (this._lastMessageSequence != null) {
          return this.sendStartingMessageSequence(this._lastMessageSequence);
        } else {
          return this.config.webSocket.connectionVerified(this);
        }
      }
    };

    WebSocket.prototype.sendStartingMessageSequence = function(message_sequence) {
      this._lastMessageSequence = message_sequence;
      this.socket.onmessage = this._message;
      this.socket.send(JSON.stringify({
        message_sequence: message_sequence
      }));
      this._needToNotifyOfDisconnect = true;
      return Firehose.Transport.prototype._open.call(this);
    };

    WebSocket.prototype.stop = function() {
      return this._cleanUp();
    };

    WebSocket.prototype._message = function(event) {
      var e, frame;
      frame = this.config.parse(event.data);
      this._restartKeepAlive();
      if (!isPong(frame)) {
        try {
          this._lastMessageSequence = frame.last_sequence;
          return this.config.message(this.config.parse(frame.message));
        } catch (_error) {
          e = _error;
        }
      }
    };

    WebSocket.prototype._close = function(event) {
      if (event != null ? event.wasClean : void 0) {
        return this._cleanUp();
      } else {
        return this._error(event);
      }
    };

    WebSocket.prototype._error = function(event) {
      this._cleanUp();
      if (this._needToNotifyOfDisconnect) {
        this._needToNotifyOfDisconnect = false;
        this.config.disconnected();
      }
      if (this._succeeded) {
        return this.connect(this._retryDelay);
      } else {
        return this.config.failed(this);
      }
    };

    WebSocket.prototype._cleanUp = function() {
      this._clearKeepalive();
      if (this.socket != null) {
        this.socket.onopen = null;
        this.socket.onclose = null;
        this.socket.onerror = null;
        this.socket.onmessage = null;
        this.socket.close();
        return delete this.socket;
      }
    };

    WebSocket.prototype._restartKeepAlive = function() {
      var doPing, setNextKeepAlive;
      doPing = (function(_this) {
        return function() {
          sendPing(_this.socket);
          return setNextKeepAlive();
        };
      })(this);
      setNextKeepAlive = (function(_this) {
        return function() {
          return _this.keepaliveTimeout = setTimeout(doPing, KEEPALIVE_PING_TIMEOUT);
        };
      })(this);
      this._clearKeepalive();
      return setNextKeepAlive();
    };

    WebSocket.prototype._clearKeepalive = function() {
      if (this.keepaliveTimeout != null) {
        clearTimeout(this.keepaliveTimeout);
        return this.keepaliveTimeout = null;
      }
    };

    return WebSocket;

  })(Firehose.Transport);

  sendPing = function(socket) {
    return socket.send(JSON.stringify({
      ping: 'PING'
    }));
  };

  isPong = function(o) {
    return o.pong === 'PONG';
  };

  Firehose.Consumer = (function() {
    function Consumer(config) {
      var _base, _base1, _base2, _base3, _base4, _base5, _base6;
      this.config = config != null ? config : {};
      this._upgradeTransport = __bind(this._upgradeTransport, this);
      this.stop = __bind(this.stop, this);
      this.connect = __bind(this.connect, this);
      (_base = this.config).message || (_base.message = function() {});
      (_base1 = this.config).error || (_base1.error = function() {});
      (_base2 = this.config).connected || (_base2.connected = function() {});
      (_base3 = this.config).disconnected || (_base3.disconnected = function() {});
      (_base4 = this.config).failed || (_base4.failed = function() {
        throw "Could not connect";
      });
      (_base5 = this.config).params || (_base5.params = {});
      (_base6 = this.config).parse || (_base6.parse = JSON.parse);
      this;
    }

    Consumer.prototype.connect = function(delay) {
      if (delay == null) {
        delay = 0;
      }
      this.config.connectionVerified = this._upgradeTransport;
      if (Firehose.WebSocket.supported()) {
        this.upgradeTimeout = setTimeout((function(_this) {
          return function() {
            var ws;
            ws = new Firehose.WebSocket(_this.config);
            return ws.connect(delay);
          };
        })(this), 500);
      }
      this.transport = new Firehose.LongPoll(this.config);
      this.transport.connect(delay);
    };

    Consumer.prototype.stop = function() {
      if (this.upgradeTimeout != null) {
        clearTimeout(this.upgradeTimeout);
        this.upgradeTimeout = null;
      }
      this.transport.stop();
    };

    Consumer.prototype._upgradeTransport = function(ws) {
      this.transport.stop();
      ws.sendStartingMessageSequence(this.transport.getLastMessageSequence());
      this.transport = ws;
    };

    return Consumer;

  })();

}).call(this);
